" Custom vim configuration
" Loaded after YADR's .vimrc

syntax enable
colorscheme peachpuff

""""""""""""""""""""""""""""
" GENERAL
""""""""""""""""""""""""""""

" Make sure we're using the expected shell
if executable('zsh')
  set shell=zsh\ -l
endif

" Improve I/O by disabling swap/backup files
" This is considered a Bad Idea (TM) by many, but I haven't (yet) had Vim
" crash on me or anything.
set nobackup
set nowritebackup
set noswapfile

" Automatically :write before running commands
set autowrite

" Highlight the current cursor line
set cursorline
highlight CursorLineNr ctermfg=grey

" Enable undofiles
set undodir=~/.vim.user/undo
set undofile

" Enable mouse and system clipboard
set mouse=a
set clipboard=unnamed

" Use relative numbers in normal mode, absolute numbers in insert
set relativenumber
set number
autocmd InsertEnter * :set number norelativenumber
autocmd InsertLeave * :set relativenumber
highlight LineNr ctermfg=darkgrey

" Reopen file buffers to the same location
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g'\"" | endif
endif

" Set tab preferences
filetype plugin indent on
set tabstop=2
set shiftwidth=2
set expandtab

" Status line
function! GitBranch()
  return system("git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n'")
endfunction

function! StatuslineGit()
  let l:branchname = GitBranch()
  return strlen(l:branchname) > 0?'  '.l:branchname.' ':''
endfunction

set laststatus=2
set statusline=
set statusline+=%#PmenuSel#
set statusline+=%{StatuslineGit()}
set statusline+=%#LineNr#
set statusline+=\ %f
set statusline+=%m\
set statusline+=%=
set statusline+=%#CursorColumn#
set statusline+=\ %y
set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
set statusline+=\[%{&fileformat}\]
set statusline+=\ %p%%
set statusline+=\ %l:%c
set statusline+=\

" Scroll margin
set scrolloff=10

""""""""""""""""""""""""""""
" FILETYPE-SPECIFIC SETTINGS
""""""""""""""""""""""""""""

" Highlight lines that exceed 80 characters
set colorcolumn=81
highlight ColorColumn ctermfg=darkgrey

" Force line-wrapping on markdown above 80 chars
autocmd FileType markdown set textwidth=80

" For git commits, shorten line length to 72 chars
autocmd FileType gitcommit set colorcolumn=73
autocmd FileType gitcommit set textwidth=72

""""""""""""""""""""""""""""
" KEY MAPPING
""""""""""""""""""""""""""""

" Open file explorer on '-'
nnoremap - :Ex<CR>

" Removes trailing spaces
function! TrimWhiteSpace()
  %s/\s\+$//e
endfunction

nnoremap <silent> <Leader>rts :call TrimWhiteSpace()<CR>

" Automatically trim whitespace on save
autocmd FileWritePre    * :call TrimWhiteSpace()
autocmd FileAppendPre   * :call TrimWhiteSpace()
autocmd FilterWritePre  * :call TrimWhiteSpace()
autocmd BufWritePre     * :call TrimWhiteSpace()

autocmd BufWritePre * :%s/\s\+$//e

" Always use 'very magic' mode searching
" This ensures that the expected perl-type regex character meanings are always
" turned on
nnoremap / /\v
vnoremap / /\v
cnoremap %s/ %smagic/
cnoremap \>s/ \>smagic/
nnoremap :g/ :g/\v
nnoremap :g// :g//

" HARD MODE
nnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>
